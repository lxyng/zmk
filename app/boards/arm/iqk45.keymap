/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/mouse.h>

/ {
	keymap0: keymap {
		compatible = "zmk,keymap";

		default_layer {
            bindings = <
            &kp KP_PLUS      &kp N7     &kp N8    &kp N9       &kp ESC   &kp Q     &kp W     &kp E               &kp R        &kp T        &kp Y       &kp U               &kp I     &kp O      &kp P      &kp BSPC
            &kp KP_MINUS     &kp N4     &kp N5    &kp N6       &kp TAB   &kp A     &kp S     &kp D               &kp F        &kp G        &kp H       &none               &kp J     &kp K      &kp L      &kp ENTER 
            &kp KP_MULTIPLY  &kp N1     &kp N2    &kp N3       &kp LSHFT &kp RSHFT &kp Z     &kp X               &kp C        &kp V        &kp B       &kp N               &kp M     &kp COMMA  &kp DOT    &kp UP
            &kp KP_SLASH     &kp KP_DOT &kp N0    &kp KP_ENTER &kp LCTRL &kp LWIN  &kp LALT  &mo 3               &none        &lt 1 SPACE  &kp SPACE   &none               &mo 2     &kp LEFT   &kp RIGHT  &kp DOWN    
            >;
		};

		fn1_layer {
            bindings = <
            &none   &none   &none   &none   &kp ESC   &kp KP_DOT &kp N7    &kp N8             &kp N9  &kp KP_PLUS   &kp KP_MULTIPLY  &kp DLLR           &kp COLON     &kp PIPE     &kp GRAVE     &kp LC(Z)
            &none   &none   &none   &none   &kp TAB   &kp N0     &kp N4    &kp N5             &kp N6  &kp KP_MINUS  &kp KP_SLASH     &none              &kp HASH      &kp LBRC     &kp RBRC      &kp SEMI  
            &none   &none   &none   &none   &kp LSHFT &kp RSHFT  &kp BSPC  &kp N1             &kp N2  &kp N3        &kp EQUAL        &kp BSLH           &kp AMPS      &kp LT       &kp GT        &kp SQT
            &none   &none   &none   &none   &kp LCTRL &kp LWIN   &kp LALT  &kp ENTER          &none   &to 0         &kp CAPS         &none              &kp LG(SPACE) &bt BT_CLR   &bt BT_SEL 1  &bt BT_SEL 2
             >;
		};

		fn2_layer {
            bindings = <
            &none   &none   &none   &none   &kp LC(Y)  &kp TILDE  &kp PRCNT &kp UNDER         &kp CARET    &kp PLUS       &kp F9     &kp F10            &kp F11    &kp F12   &none      &kp DEL
            &none   &none   &none   &none   &kp TAB    &kp AT     &kp DQT   &kp EXCL          &kp QMARK    &kp MINUS      &kp F5     &none              &kp F6     &kp F7    &kp F8     &kp ENTER
            &none   &none   &none   &none   &kp LSHFT  &kp RSHFT  &kp LBKT  &kp RBKT          &kp LPAR     &kp RPAR       &kp EQUAL  &kp F1             &kp F2     &kp F3    &kp F4     &kp PG_UP  
            &none   &none   &none   &none   &kp RCTRL  &kp RWIN   &kp RALT  &kp LS(LC(O))     &none        &kp LS(LC(X))  &kp LC(R)  &none              &to 0      &kp HOME  &kp PG_DN  &kp END
            >;
		};

		fn3_layer {
            bindings = <
            &none   &none   &none   &none   &kp LS(LC(LA(F1)))  &kp LS(LC(LA(Q)))  &kp LS(LC(LA(W)))  &kp LS(LC(LA(E)))      &kp LS(LC(LA(R)))  &kp LS(LC(LA(T)))   &kp LS(LC(LA(Y)))  &kp LS(LC(LA(U)))       &kp LS(LC(LA(I)))  &kp LS(LC(LA(O)))     &kp LS(LC(LA(P)))     &kp LS(LC(LA(BSPC)))   
            &none   &none   &none   &none   &kp LS(LC(LA(F2)))  &kp LS(LC(LA(A)))  &kp LS(LC(LA(S)))  &kp LS(LC(LA(D)))      &kp LS(LC(LA(F)))  &kp LS(LC(LA(G)))   &kp LS(LC(LA(H)))  &none                   &kp LS(LC(LA(J)))  &kp LS(LC(LA(K)))     &kp LS(LC(LA(L)))     &kp LS(LC(LA(ENTER)))     
            &none   &none   &none   &none   &kp LS(LC(LA(F3)))  &kp LS(LC(LA(F4))) &kp LS(LC(LA(Z)))  &kp LS(LC(LA(X)))      &kp LS(LC(LA(C)))  &kp LS(LC(LA(V)))   &kp LS(LC(LA(B)))  &kp LS(LC(LA(N)))       &kp LS(LC(LA(M)))  &kp LS(LC(LA(COMMA))) &kp LS(LC(LA(DOT)))   &kp LS(LC(LA(UP)))     
            &none   &none   &none   &none   &bt BT_CLR          &bt BT_SEL 1       &bt BT_SEL 2       &to 0                  &none              &kp C_PP            &kp C_MUTE         &none                   &kp C_PREV         &kp C_NEXT            &kp C_VOL_DN          &kp C_VOL_UP    
            >;
		};
	};
};
